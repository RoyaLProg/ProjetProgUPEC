//si une fonction fait plus de 10 lignes (hors déclaration et accolade fermante de fin), c'est à cause de vos options de sauvegarde sous robusta.
class Box{
    int x = 0;
    int y = 0;
    int color = 0;
    int fetch = 0;
}
class Game{
    private Board board;
    private int[] coup = {0,0};
    private boolean playerselection = false;
    private char[] playerchar = {'o','+','~','o'};
    private boolean finished = false;
    private boolean InGame = false;
    public boolean debug = false;
    private boolean versusAI = false;
    private AI Computer = new AI();
    private int player = 1;
    public Game(){
        board = new Board();
    }
    public void Affichage(){
        println("  A B C D E F G H I J K");
        for(int i =0;i<board.boxes.length;i++){
            for(int space = 0; space < i; space++) print(" ");
            print(i + 1 + " ");
            for(int j=0;j<board.boxes[0].length;j++){
                print(playerchar[board.boxes[i][j].color]);
                if(j<10) print(" ");
            }
            println(" "+(i+1));
        }
        println("             A B C D E F G H I J K");
    }
    public void setDebug(boolean x){
        debug = x;
    }
    public void selectSymbole(){
        char c;
        for(int i = 1; i<=2; i++){
            c = readChar("symbole joueur " + i + " laissez vide pour garder celui par defaut ("+playerchar[i]+")");
            if (c != Character.MIN_VALUE) playerchar[i] = c;
        }
    }
    public void toggleDebug(){
        println("debug : " + !debug);
        setDebug(!debug);
    }
    public void jouerCoup(int player){
        int x = 0;
        try{
            String pre_y = readString("Joueur "+ player + " Ligne ?");
            if(equal(pre_y,"exit")){finished = true; return;}
            int y = Integer.parseInt(pre_y);
            String pre_x = readString("Joueur "+ player + " Colone ?");
            if(equal(pre_x,"exit")){finished = true; return;}
            x  = getColumn(pre_x);
            board.changeColor(x,y-1,player);
            changePlayer(x,y-1);
        }catch(Exception e){Error("entrees vides detectees ! \n tapez \"exit\" pour fermer la partie !");}
    }
    public int getColumn(String pre_x){
        int bet_x= -1;
        int x = -1;
            try{
                bet_x = Integer.parseInt(pre_x);
            }catch(Exception e){}
            if(bet_x != -1)x = bet_x-1;
            else x = getColumnFromChar(pre_x);
            if (x == -1) Error("Merci de donner un numero/caratere correct");
        return x;
    }
    public int getColumnFromChar(String pre_x){
        int x = -1;
        String[] l = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K"};
        String[] l2 = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"};
        for(int i = 0; i < l.length; i++){
                    if(equal(pre_x,l[i])){x = i; break;}
                    if(equal(pre_x,l2[i])){x = i; break;}
        }
        return x;
    }
    public void Error(String m){
        clear();
        println("error : " + m);
        sleep(5000);
    }
    public void changePlayer(int x,int y){
        player = 3-player;
        if(debug){
            coup[0] = x;
            coup[1] = y;
        }
    }
    public void Enregistrement(String format){
        String x = readString("nom du fichier ? \nVous pouvez specifier un chemin d'access : (i.e /path/to/file) \npar defaut il sera enregistrer dans le repertoire du jeux ");
        String ext = ".csv";
        String txt = "";    
        if(equal(format,"FEN")){ext = ".txt"; txt = getFEN(txt);}
        else if(equal(format,"tableau")){txt = getTab(txt);}
        else if(equal(format,"liste")){txt = getListe(txt);}
        else Error("Une erreur inconnu dans game.Enregistrement()");
        String Path = getPath(x,ext);
        SaveAtPath(Path,txt);
    }
    public String getFEN(String txt){
        int count = 0;  
        for(int i = 0; i < board.boxes.length; i++){
            for (int j = 0; j < board.boxes[0].length; j++){
                if(board.boxes[i][j].color == 0 || board.boxes[i][j].color == 3) count++;
                else txt = verifFEN(txt,count,i,j);
            }
            count = 0;
            if(i < 10) txt +="/";
        }
        return txt;
    }
    public String verifFEN(String txt,int count,int i,int j){
        String[] charp = {"x","X"};
        if(count != 0)txt+=count;
        txt += charp[board.boxes[i][j].color-1];
        count = 0;
        if(i == 10 && j == 10) txt += " "+player;
        return txt;
    }
    public String getTab(String txt){
        for(int i = 0; i < board.boxes.length; i++){
            for(int j = 0; j < board.boxes[0].length; j++){
                txt += board.boxes[i][j].color;
                if(j < 10) txt += ",";
            }
            txt += "\n";
        }
        return txt;
    }
    public String getListe(String txt){
        for(int i = 0; i < board.boxes.length; i++){
            for(int j = 0; j < board.boxes[0].length; j++){
                txt += i + "," + j + "," + board.boxes[i][j].color;
                if(j < 10) txt += "\n";
            }
            txt += "\n";
        }
        return txt;
    }
    String getPath(String x,String ext){
        String name = "";
        if(!equal(stringNth(x,0),"/") && !equal(stringNth(x,0),"C")){
                name = "./"+x;
        } else {
             name = x;
        }
        name+=ext;
        return name;
    }
    void SaveAtPath(String Path,String txt){
        java.io.OutputStreamWriter file; 
        println("Enregistre à : " + Path);
        file=openOut(Path);
        printToFile(file, txt);
        closeOut(file);
        println(txt);
        clear();
    }
}
public class Board{
    private Box[][] boxes = new Box[11][11];
    public Board(){
        for(int i = 0; i < boxes.length; i++){
            for(int j = 0; j < boxes[0].length; j++){
                boxes[i][j] = new Box();
                boxes[i][j].x = j+1;
                boxes[i][j].y = i+1;
                boxes[i][j].color = 0;
            }
        }
    }
    public void reset(){
        int count = 0;
        int x = 1;
        int y = 1;
        while (count < 121){
            for(int i = 0; i < boxes.length; i++){
            for(int j = 0; j < boxes[0].length; j++){
                boxes[i][j].x = j;
                boxes[i][j].y = i;
                boxes[i][j].color = 0;
            }
        }
        }
    }
    public void getColorMap(){
        for(int i = 0;i<boxes.length;i++){
            for(int j = 0; j<boxes[0].length;j++){
                print(boxes[i][j].color + " ");
            }
            println();
        }
        println("0 = vide; 1 = joueur 1; 2 = joueur 2; 3 = AI PARSE");
        int count = 0;
    }
    public int getColor(int x,int y){
        return this.boxes[x-1][y-1].color;
    }
    public void changeColor(int x, int y, int player){
        boxes[y][x].color = player;
    }
}
private class AI{
    Board board = new Board();
    int color = 0;
    
}
public class GUI{
    public void Affichage(Board board){
        for(int i = 0; i < board.boxes.length;i++){
            for(int j = 0; j < board.boxes[0].length;j++){
                Hexagone(board.boxes[i][j].x, board.boxes[i][j].y);
            }
        }
    }
    public void Hexagone(int bx, int by){
        int x = 10;
        int l = 10;
        int h = 10;
        int offset = 10;
        boolean down = false;
        for(int i = -20; i < 20; i++){
            for(int j = -20; j < 20; j++){
                if((j <= -offset || j >= offset));
                else setPixel(i,j,"blue");
            }
            if (!down && i%2==0) offset++;
            else if(down && offset>10 && i%2==0)offset--;
            if(offset == 20) down = true;
        }
    }
}
void main(){
    Game game = new Game();
    Board board = game.board;
    while(!game.finished){
        while(!game.playerselection){
            String x = readString("Combien de joueurs ?");
            switch(x){
                case "debug":
                    game.toggleDebug();
                    break;
                case "1" :
                    println("error : Pour le moment le jeux n'est jouable que a deux ...");
                    break;
                case "2" :
                    game.selectSymbole();
                    game.playerselection = true;
                    break;
                default:
                    println("error : inconnu");
                    break;
            }
        }
        clear();
        game.Affichage();
        if(game.debug){
            println();
            println();
            try{
            println("player : " + game.player +", finished : "+game.finished+", dernier coup : " + game.coup[0] + " " + game.coup[1]);
            println();
            }catch(Exception e){
            println("player : " + game.player +", finished : "+game.finished+", dernier coup : none");
            println();
            }
            board.getColorMap();
        }
        game.jouerCoup(game.player);
        clear();
    }
    boolean enregistrer = false;
    String x = readString("souhaitez vous enregistrer la partie dans un fichier ? [o/N]");
        switch(x){
            case "O" :
                enregistrer = true;
                break;
            case "o" :
                enregistrer = true;
                break;
            default :
                break;
        }
        if (enregistrer == true ){
            String format = "";
            while(enregistrer){
                x = readString("Sous quel format ? (FEN (TXT), tableau (CSV), liste (CSV) )");
                switch(x){
                    case "FEN" :
                        game.Enregistrement(x);
                        break;
                    case "tableau" :
                        game.Enregistrement(x);
                        break;
                    case "liste" :
                        game.Enregistrement(x);
                        break;
                    default :
                        println("error : inconnu");
                        break;
                }
                x = readString("Voulez-vous l'enregistrer dans un autre format ? [o/N]");
                switch(x){
                    case "O" :
                        enregistrer = true;
                        break;
                    case "o" :
                        enregistrer = true;
                        break;
                    default :
                        enregistrer = false;
                        break;
                }
            }
        }
    print("Le programme s'est terminee avec succes !");
}